import org.gradle.plugins.ide.idea.model.IdeaModel
import org.gradle.plugins.ide.idea.model.IdeaProject

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url 'http://oss.sonatype.org/content/repositories/snapshots'
        }
        maven {
            url 'http://dl.bintray.com/jaysonminard/kohesive'
        }
/*  disabled during non EAP builds
        maven {
            url 'http://dl.bintray.com/kotlin/kotlin-eap'
        }
*/
    }
    //noinspection GroovyAssignabilityCheck
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$version_kotlin"
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
        // classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.2'
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$version_dokka"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.4'
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'idea'
    apply plugin: 'kotlin'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.incremental = true
        options.compilerArgs << '-Xlint:unchecked'
    }

    IdeaModel idea = project.idea
    IdeaProject ideaProject = idea.getProject()

    if (ideaProject != null) {
        ideaProject.setJdkName(project.targetCompatibility.getName())
        ideaProject.setLanguageLevel(project.sourceCompatibility.getName())
        if (ideaProject.hasProperty("vcs")) {
            ideaProject.setVcs('Git')
        }
    }

    idea.module {
        downloadJavadoc = true
        downloadSources = true
    }

    repositories {
        mavenCentral()
        jcenter()
  /* disabled during non EAP builds
        maven {
            url 'http://dl.bintray.com/kotlin/kotlin-eap'
        }
        maven {
            url 'http://dl.bintray.com/jaysonminard/kohesive'
        }
        maven {
            url 'http://dl.bintray.com/mplatvoet/komponents'
        }
  */
    }

    dependencies {
        compileOnly "org.jetbrains.kotlin:kotlin-stdlib:$version_kotlin"
        testCompile "org.jetbrains.kotlin:kotlin-stdlib:$version_kotlin"
        testRuntime "org.jetbrains.kotlin:kotlin-stdlib:$version_kotlin"

        testCompile "junit:junit:$version_junit"
        testCompile "org.jetbrains.kotlin:kotlin-test:$version_kotlin"

       // testCompile "org.slf4j:slf4j-api:$version_slf4j"
       // testCompile "org.jetbrains.kotlin:kotlin-reflect:$version_kotlin"
       // testRuntime "ch.qos.logback:logback-classic:$version_logback"
    }

    //noinspection GroovyAssignabilityCheck
    configurations.all {
        // kill all logging anything else might bring in, all of our projects use slf4j if any
        exclude group: "org.slf4j", module: "slf4j-simple"
        exclude group: "commons-logging"
        exclude group: "log4j"
        exclude group: "com.google.code.findbugs"
        exclude group: "org.slf4j", module: "slf4j-log4j12"

        resolutionStrategy {
            cacheDynamicVersionsFor 12, 'hours'  // things with wildcard version numbers
            cacheChangingModulesFor 0, 'hours'
            // things with same version, but content of module changes, i.e. SNAPSHOT
        }

    }
}

subprojects { subproj ->
    apply plugin: 'com.bmuschko.nexus'
    apply plugin: 'com.jfrog.bintray'

    def pomOnlyModule = !(new File("${projectDir.toString()}/src/main/kotlin").exists())
    if (pomOnlyModule) {
        println("Project $name is POM ONLY (has no code of its own)")

        task jars() {
            dependsOn build
        }

        artifacts {}
        task subRelease() {
            dependsOn uploadArchives
        }
    } else {
        apply plugin: 'org.jetbrains.dokka'

        def dirname = subproj.projectDir.absoluteFile.name
        def moduleName = subproj.name
        def dokkaOutputBase = "${rootDir}/docs"
        def dokkaLinkDir = "${projectDir}/src/main/kotlin"
        def dokkaLinkUrl = "https://github.com/kohesive/klutter/blob/master/${dirname}/src/main/kotlin"
        def dokkaLinkSuffix = "#L"

        def dokkaIncludes = [ "${projectDir}/README.md" ]

        // TODO: remove when no more JDK specific modules
        def jdkMarkerIndex = moduleName.indexOf("-jdk")
        if (jdkMarkerIndex > 0) {
            def tempModuleName = moduleName.substring(0, jdkMarkerIndex)
            def cleanModuleName = tempModuleName
            if (tempModuleName.startsWith("klutter-")) {
               cleanModuleName = tempModuleName.substring("klutter-".length())
            }
            // TODO: reflect-full and reflect-core should go to reflect readme, odd pattern for these two
            dokkaIncludes = [ "${projectDir}/../${cleanModuleName}/README.md", "${projectDir}/README.md" ]
            println(" INCLUDES: ${dokkaIncludes}")
        }

        // our form of JavaDoc for JARs in Maven (from Java perspective, not good docs for Kotlin)
        dokka {
            outputFormat = "javadoc"
            outputDirectory = "${buildDir}/javadoc"
            linkMapping {
                dir = dokkaLinkDir
                url = dokkaLinkUrl
                suffix = dokkaLinkSuffix
            }
        }

        // output to docs directory:  HTML format
        task dokkaHtml(type: org.jetbrains.dokka.gradle.DokkaTask) {
            outputFormat = "html"
            outputDirectory = "${dokkaOutputBase}/${outputFormat}/${moduleName}"
            linkMapping {
                dir = dokkaLinkDir
                url = dokkaLinkUrl
                suffix = dokkaLinkSuffix
            }
        }

        // output to docs directory:  Markdown format
        task dokkaMarkdown(type: org.jetbrains.dokka.gradle.DokkaTask) {
            outputFormat = "markdown"
            outputDirectory = "${dokkaOutputBase}/${outputFormat}/${moduleName}"
           // includes = dokkaIncludes
            linkMapping {
                dir = dokkaLinkDir
                url = dokkaLinkUrl
                suffix = dokkaLinkSuffix
            }
        }

        // output to docs directory:  Javadoc format

        task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
            outputFormat = "javadoc"
            outputDirectory = "${dokkaOutputBase}/${outputFormat}/${moduleName}"
            linkMapping {
                dir = dokkaLinkDir
                url = dokkaLinkUrl
                suffix = dokkaLinkSuffix
            }
        }

        task dokkaAll() {
            // dependsOn dokkaHtml
            dependsOn dokkaMarkdown
            // dependsOn dokkaJavadoc
        }

        task jars() {
            dependsOn build
            dependsOn javadoc
            dependsOn dokkaAll
        }

        javadoc.dependsOn(dokka)
        task subRelease() {
            dependsOn jars, uploadArchives
        }
    }

    modifyPom {
        project {
            name 'Klutter for Kotlin'
            description 'Random small libraries for Kotlin.'
            url 'https://github.com/kohesive/klutter'
            inceptionYear '2015'

            scm {
                url 'https://github.com/kohesive/klutter'
                connection 'scm:https://github.com/kohesive/klutter'
                developerConnection 'scm:git@github.com:klutter/klutter.git'
            }

            licenses {
                license {
                    name 'MIT'
                    url 'https://github.com/kohesive/klutter/blob/master/LICENSE'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'apatrida'
                    name 'Jayson Minard'
                    email 'jayson.minard@gmail.com'
                }
            }
        }

    }

    nexus {
        sign = true
    }

    bintray {
        user = "$bintrayUser"
        key = "$bintrayKey"
        pkg {
            repo = 'kohesive'
            name = project.name
            licenses = ['MIT']
            vcsUrl = 'scm:git:git@github.com:kohesive/klutter.git'

            version {
                name = project.version
                desc = 'n/a'
                released = new Date()
            }
            publicDownloadNumbers = false
            configurations = ['archives']
        }
        publish = true
        dryRun = false
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = "$version_gradle"
}

task jars() {
    dependsOn subprojects.jars
}

task release() {
    dependsOn subprojects.subRelease
}


defaultTasks 'clean', 'jars'
